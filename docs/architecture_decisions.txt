
* Add location micro Services  This microService to handle the location related work, get location for connections... 

 
* finally person microService to handle person functionality, and call location service internally 
	- use Kafka as cache storage, such that if any of the pods is down you still can get them from the cache 
	
in terms of progress and development 

* start with Connection microservice, as it's a seperate block
	- Code 
		* Search for the Cache if any return otherwise, get from the DataBase 
		* gRPC implement 
		* person Service to use the code 
		-- OutOfSCope: Update the Cache frequently, or according to specific strategy 
	- docker image 
	- github workflow to build and push the image  
	- replace the main code to use the API 
	- deployment script 
* Location Service as it's not used by any client yet 
	- Code 
		* cleanup and seperate project  
		* OpenAPI implementation   
	- docker image 
	- github workflow to build and push the image  
	- replace the main code to use the API 
	- deployment script 
- Person microService 
	- Code 
		* cleanup and seperate project 
		 * for connection API, if the connection in kafka cach retrieve otherwise call location service and before return the results save to kafka  
		* OpenAPI implementation   
	- docker image 
	- github workflow to build and push the image  
	- replace the frontend code to use the API 
	- deployment script 

I didn't find a valid point to use Grpc in this project 